"use strict";function myController(t,e){var a=this,r=[],n={};a.companiesNames=["CSCO","MSFT","ADBE"],a.showCompany=function(e){return n[e]?void(a.company=n[e]):(n[e]=[],void t.getCompanyDate(e).then(function(t){var o=t.quote;angular.forEach(o,function(t){t.Date=new Date(t.Date.split("-").join(",")),n[e].push(t),a.companyNames=r,a.company=n[e]})},function(t){alert("error")}))}}function StockService(t,e){var a="http://query.yahooapis.com/v1/public/yql?q=",r="&format=json&diagnostics=true&env=http://datatables.org/alltables.env";return{getCompanyDate:function(n){var o=a+encodeURI("select * from yahoo.finance.historicaldata where symbol in('"+n+"')and startDate = '2016-01-01' and endDate = '2016-06-30'")+r,i=e.defer();return t.get(o).then(function(t){var e=angular.fromJson(t.data.query.results);i.resolve(e)},function(t){i.reject({message:"Problem with connection"})}),i.promise}}}angular.module("d3",[]).factory("d3Service",["$document","$q","$rootScope",function(t,e,a){function r(){a.$apply(function(){n.resolve(window.d3)})}var n=e.defer(),o=t[0].createElement("script");o.type="text/javascript",o.async=!0,o.src="http://d3js.org/d3.v4.min.js",o.onreadystatechange=function(){"complete"==this.readyState&&r()},o.onload=r;var i=t[0].getElementsByTagName("body")[0];return i.appendChild(o),{d3:function(){return n.promise}}}]),angular.module("app",["d3"]),angular.module("app",["d3"]).config(function(t){t.html5Mode(!0)}),angular.module("app",["d3"]).service("StockService",StockService),angular.module("app",["d3"]).controller("myController",myController),angular.module("app").directive("chart",["d3Service",function(t){function e(e,a){t.d3().then(function(t){e.$watch("item",function(e){function r(){if(!t.event.sourceEvent||"zoom"!==t.event.sourceEvent.type){var e=t.event.selection;m.domain(e.map(f.invert,f)),S.select(".area").attr("d",B),S.selectAll(".dot").attr("cx",function(t){return m(t.Date)}).attr("cy",function(t){return g(t.Close)}),S.select(".axis--x").call(x),h.domain();var a=e.map(f.invert,f);h.domain(o.map(function(t){if(a[0]<=t.Date&&t.Date<=a[1])return t.Date})),A.selectAll("rect").attr("x",function(t){if(a[0]<=t.Date&&t.Date<=a[1])return h(t.Date)}).attr("y",function(t){if(a[0]<=t.Date&&t.Date<=a[1])return v(t.High)}).attr("date",function(t){if(a[0]<=t.Date&&t.Date<=a[1])return t.Date}).attr("height",function(t){if(v(t.High),v(t.Low),a[0]<=t.Date&&t.Date<=a[1])return v(t.Low)-v(t.High)}).attr("width",h.bandwidth()),A.select(".axis--x").call(b).selectAll("text").text(function(e){if(e){var a=t.timeFormat("%m-%d");return a(e)}}).style("text-anchor","end").attr("dx","-.8em").attr("dy","-.55em").attr("transform","rotate(-90)")}}if(e){var n;t.select("#ID").remove();var o=angular.copy(e).reverse(),i={top:20,right:20,bottom:410,left:50},l={top:430,right:20,bottom:330,left:50},c={top:500,right:20,bottom:40,left:50},s=1200-i.left-i.right,d=800-i.top-i.bottom,p=800-l.top-l.bottom,u=800-c.top-c.bottom,m=t.scaleTime().range([0,s]),f=t.scaleTime().range([0,s]),h=t.scaleBand().rangeRound([0,s]).padding(.1).align(.1),g=t.scaleLinear().range([d,0]),y=t.scaleLinear().range([p,0]),v=t.scaleLinear().range([u,0]),x=t.axisBottom(m),D=t.axisBottom(f),b=t.axisBottom(h).tickFormat(t.timeFormat("%m-%d")),w=t.axisLeft(g),C=t.axisLeft(v),L=t.brushX().extent([[0,0],[s,p]]).on("brush",r);n=t.select(a[0]).append("svg").attr("id","ID").attr("width",s+i.left+i.right).attr("height",d+i.top+i.bottom),n.append("defs").append("clipPath").attr("id","clip").append("rect").attr("width",s).attr("height",d);var S=n.append("g").attr("class","focus").attr("transform","translate("+i.left+","+i.top+")"),H=n.append("g").attr("class","context").attr("transform","translate("+l.left+","+l.top+")"),A=n.append("g").attr("class","freg").attr("transform","translate("+c.left+","+c.top+")");m.domain(t.extent(o,function(t){return t.Date})),g.domain([t.min(o,function(t){return t.Low}),t.max(o,function(t){return t.High})]),f.domain(m.domain()),y.domain(g.domain()),h.domain(o.map(function(t){return t.Date})),v.domain(g.domain());var B=t.area().curve(t.curveMonotoneX).x(function(t){return m(t.Date)}).y0(d).y1(function(t){return g(t.Close)});S.append("path").data([o]).attr("class","area").attr("d",B);var E=S.append("g");E.attr("clip-path","url(#clip)"),E.selectAll("dot").data(o).enter().append("circle").attr("class","dot").attr("r",3).style("opacity",.5).attr("cx",function(t){return m(t.Date)}).attr("cy",function(t){return g(t.Close)}).on("mouseover",function(e){t.select(this).attr("r",7);var a=t.timeFormat("%e %B");j.html("<table><tr><td>Date</td><td>"+a(e.Date)+"</td></tr><tr><td>Open</td><td>"+e.Open+"</td></tr><tr><td>Close</td><td>"+e.Close+"</td></tr><tr><td>High</td><td>"+e.High+"</td></tr><tr><td>Low</td><td>"+e.Low+"</td></tr><tr><td>Volume</td><td>"+e.Volume+"</td></tr></table>").style("left",t.event.pageX+"px").style("top",t.event.pageY-parseInt(j.style("height"),10)+"px").transition().duration(200).style("opacity",.9)}).on("mouseout",function(e){t.select(this).attr("r",3),j.transition().duration(500).style("opacity",0)}),S.append("g").attr("class","axis axis--x").attr("fill","none").attr("transform","translate(0,"+d+")").call(x),S.append("g").attr("class","axis axis--y").call(w),S.append("text").attr("transform","rotate(-90)").attr("y",0-i.left).attr("x",0-d/2).attr("dy","1em").style("text-anchor","middle").text("Price"),n.append("text").attr("transform","translate("+(s+i.right+i.left)/2+" ,"+c.top+")").style("text-anchor","middle").text("Date");var j=t.select(a[0]).append("div").attr("class","tooltip").style("opacity",0);H.append("g").attr("class","axis axis--x").attr("transform","translate(0,"+p+")").call(D),H.append("g").attr("class","brush").call(L).call(L.move,m.range());var q=t.area().curve(t.curveMonotoneX).x(function(t){return f(t.Date)}).y0(p).y1(function(t){return y(t.Close)});H.append("path").datum(o).attr("class","area").attr("d",q),A.append("g").attr("class","axis axis--x").attr("transform","translate(0,"+u+")").call(b).selectAll("text").style("text-anchor","end").attr("dx","-.8em").attr("dy","-.55em").attr("transform","rotate(-90)"),A.append("g").attr("class","axis axis--y").call(C);A.selectAll("rect").data(o).enter().append("rect").attr("class","bar").attr("x",function(t){return h(t.Date)}).attr("y",function(t){return v(t.High)}).attr("height",function(t){return v(t.High),v(t.Low),v(t.Low)-v(t.High)}).attr("width",h.bandwidth())}})})}return{restrict:"E",scope:{item:"<?ngModel"},link:e}}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsImRpcmVjdGl2ZXMvY2hhcnQvY2hhcnQuZGlyZWN0aXZlLmpzIl0sIm5hbWVzIjpbIm15Q29udHJvbGxlciIsIlN0b2NrU2VydmljZSIsIiRzY29wZSIsIm1vZGVsIiwidGhpcyIsImNvbXBhbnlOYW1lcyIsImNvbXBhbnkiLCJjb21wYW5pZXNOYW1lcyIsInNob3dDb21wYW55IiwibmFtZSIsImdldENvbXBhbnlEYXRlIiwidGhlbiIsInJlc3BvbnNlIiwiZGF0YSIsInF1b3RlIiwiYW5ndWxhciIsImZvckVhY2giLCJ2YWx1ZSIsIkRhdGUiLCJzcGxpdCIsImpvaW4iLCJwdXNoIiwiZXJyb3IiLCJhbGVydCIsIiRodHRwIiwiJHEiLCJkb21haW4iLCJxdWVyeSIsInVybCIsImVuY29kZVVSSSIsImRlZmVycmVkIiwiZGVmZXIiLCJnZXQiLCJkYXRlIiwiZnJvbUpzb24iLCJyZXN1bHRzIiwicmVzb2x2ZSIsInJlamVjdCIsIm1lc3NhZ2UiLCJwcm9taXNlIiwibW9kdWxlIiwiZmFjdG9yeSIsIiRkb2N1bWVudCIsIiRyb290U2NvcGUiLCJvblNjcmlwdExvYWQiLCIkYXBwbHkiLCJkIiwid2luZG93IiwiZDMiLCJzY3JpcHRUYWciLCJjcmVhdGVFbGVtZW50IiwidHlwZSIsImFzeW5jIiwic3JjIiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVhZHlTdGF0ZSIsIm9ubG9hZCIsInMiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImFwcGVuZENoaWxkIiwiY29uZmlnIiwiJGxvY2F0aW9uUHJvdmlkZXIiLCJodG1sNU1vZGUiLCJzZXJ2aWNlIiwiY29udHJvbGxlciIsImRpcmVjdGl2ZSIsImQzU2VydmljZSIsImxpbmsiLCJzY29wZSIsImVsZW1lbnQiLCIkd2F0Y2giLCJuVmFsIiwiYnJ1c2hlZCIsImV2ZW50Iiwic291cmNlRXZlbnQiLCJzZWxlY3Rpb24iLCJ4IiwibWFwIiwieDIiLCJpbnZlcnQiLCJmb2N1cyIsInNlbGVjdCIsImF0dHIiLCJhcmVhIiwic2VsZWN0QWxsIiwieSIsIkNsb3NlIiwiY2FsbCIsInhBeGlzIiwieDMiLCJyYW5nZSIsImZyZWciLCJ5MyIsIkhpZ2giLCJMb3ciLCJiYW5kd2lkdGgiLCJ4QXhpczMiLCJ0ZXh0IiwiZm9ybWF0VGltZSIsInRpbWVGb3JtYXQiLCJzdHlsZSIsInN2ZyIsInJlbW92ZSIsImNvcHkiLCJyZXZlcnNlIiwibWFyZ2luIiwidG9wIiwicmlnaHQiLCJib3R0b20iLCJsZWZ0IiwibWFyZ2luMiIsIm1hcmdpbjMiLCJ3aWR0aCIsImhlaWdodCIsImhlaWdodDIiLCJoZWlnaHQzIiwic2NhbGVUaW1lIiwic2NhbGVCYW5kIiwicmFuZ2VSb3VuZCIsInBhZGRpbmciLCJhbGlnbiIsInNjYWxlTGluZWFyIiwieTIiLCJheGlzQm90dG9tIiwieEF4aXMyIiwidGlja0Zvcm1hdCIsInlBeGlzIiwiYXhpc0xlZnQiLCJ5QXhpczMiLCJicnVzaCIsImJydXNoWCIsImV4dGVudCIsIm9uIiwiYXBwZW5kIiwiY29udGV4dCIsIm1pbiIsIm1heCIsImN1cnZlIiwiY3VydmVNb25vdG9uZVgiLCJ5MCIsInkxIiwiZG90cyIsImVudGVyIiwiZGl2IiwiaHRtbCIsIk9wZW4iLCJWb2x1bWUiLCJwYWdlWSIsInBhcnNlSW50IiwidHJhbnNpdGlvbiIsImR1cmF0aW9uIiwibW92ZSIsImFyZWEyIiwiZGF0dW0iLCJyZXN0cmljdCIsIml0ZW0iXSwibWFwcGluZ3MiOiJBQUFBLFlBbUNBLFNBQUFBLGNBQUFDLEVBQUFDLEdBQ0EsR0FBQUMsR0FBQUMsS0FDQUMsS0FDQUMsSUFDQUgsR0FBQUksZ0JBQUEsT0FBQSxPQUFBLFFBRUFKLEVBQUFLLFlBQUEsU0FBQUMsR0FDQSxNQUFBSCxHQUFBRyxRQUNBTixFQUFBRyxRQUFBQSxFQUFBRyxLQUdBSCxFQUFBRyxVQUNBUixHQUFBUyxlQUFBRCxHQUFBRSxLQUFBLFNBQUFDLEdBQ0EsR0FBQUMsR0FBQUQsRUFBQUUsS0FDQUMsU0FBQUMsUUFBQUgsRUFBQSxTQUFBSSxH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RUFBQWdELEtBRUFGLEVBQUE5QyxFQUFBZ0QsS0FBQUYsRUFBQTlDLEVBQUErQyxRQUVBWCxLQUFBLFFBQUFPLEVBQUFNLGtCQXpQQSxPQUNBMkQsU0FBQSxJQUNBdEYsT0FDQXVGLEtBQUEsYUFFQXhGLEtBQUFBIiwiZmlsZSI6Im1haW4ubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5hbmd1bGFyLm1vZHVsZSgnZDMnLCBbXSlcbiAgLmZhY3RvcnkoJ2QzU2VydmljZScsIFsnJGRvY3VtZW50JywgJyRxJywgJyRyb290U2NvcGUnLFxuICAgIGZ1bmN0aW9uKCRkb2N1bWVudCwgJHEsICRyb290U2NvcGUpIHtcbiAgICAgIHZhciBkID0gJHEuZGVmZXIoKTtcbiAgICAgIGZ1bmN0aW9uIG9uU2NyaXB0TG9hZCgpIHtcbiAgICAgICAgLy8gTG9hZCBjbGllbnQgaW4gdGhlIGJyb3dzZXJcbiAgICAgICAgJHJvb3RTY29wZS4kYXBwbHkoZnVuY3Rpb24oKSB7IGQucmVzb2x2ZSh3aW5kb3cuZDMpOyB9KTtcbiAgICAgIH1cblxuICAgICAgdmFyIHNjcmlwdFRhZyA9ICRkb2N1bWVudFswXS5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcbiAgICAgIHNjcmlwdFRhZy50eXBlID0gJ3RleHQvamF2YXNjcmlwdCc7XG4gICAgICBzY3JpcHRUYWcuYXN5bmMgPSB0cnVlO1xuICAgICAgc2NyaXB0VGFnLnNyYyA9ICdodHRwOi8vZDNqcy5vcmcvZDMudjQubWluLmpzJztcbiAgICAgIHNjcmlwdFRhZy5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLnJlYWR5U3RhdGUgPT0gJ2NvbXBsZXRlJykgb25TY3JpcHRMb2FkKCk7XG4gICAgICB9XG4gICAgICBzY3JpcHRUYWcub25sb2FkID0gb25TY3JpcHRMb2FkO1xuXG4gICAgICB2YXIgcyA9ICRkb2N1bWVudFswXS5nZXRFbGVtZW50c0J5VGFnTmFtZSgnYm9keScpWzBdO1xuICAgICAgcy5hcHBlbmRDaGlsZChzY3JpcHRUYWcpO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBkMzogZnVuY3Rpb24oKSB7IHJldHVybiBkLnByb21pc2U7IH1cbiAgICAgIH07XG59XSk7XG5cbmFuZ3VsYXIubW9kdWxlKCdhcHAnLCBbJ2QzJ10pO1xuYW5ndWxhci5tb2R1bGUoJ2FwcCcsIFsnZDMnXSkuY29uZmlnKGZ1bmN0aW9uKCRsb2NhdGlvblByb3ZpZGVyKSB7XG4gICRsb2NhdGlvblByb3ZpZGVyLmh0bWw1TW9kZSh0cnVlKTtcbn0pO1xuYW5ndWxhci5tb2R1bGUoJ2FwcCcsIFsnZDMnXSkuc2VydmljZSgnU3RvY2tTZXJ2aWNlJywgU3RvY2tTZXJ2aWNlKTtcbmFuZ3VsYXIubW9kdWxlKCdhcHAnLCBbJ2QzJ10pLmNvbnRyb2xsZXIoJ215Q29udHJvbGxlcicsIG15Q29udHJvbGxlcik7XG5cbmZ1bmN0aW9uIG15Q29udHJvbGxlcihTdG9ja1NlcnZpY2UsICRzY29wZSkge1xuICB2YXIgbW9kZWwgPSB0aGlzO1xuICB2YXIgY29tcGFueU5hbWVzID0gW107XG4gIHZhciBjb21wYW55ID0ge307XG4gIG1vZGVsLmNvbXBhbmllc05hbWVzID0gWydDU0NPJywgJ01TRlQnLCAnQURCRSddO1xuXG4gIG1vZGVsLnNob3dDb21wYW55ID0gZnVuY3Rpb24obmFtZSl7XG4gICAgaWYoISFjb21wYW55W25hbWVdKXtcbiAgICAgIG1vZGVsLmNvbXBhbnkgPSBjb21wYW55W25hbWVdO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb21wYW55W25hbWVdID0gW107XG4gICAgU3RvY2tTZXJ2aWNlLmdldENvbXBhbnlEYXRlKG5hbWUpLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2Upe1xuICAgICAgdmFyIGRhdGE9cmVzcG9uc2UucXVvdGU7XG4gICAgICBhbmd1bGFyLmZvckVhY2goZGF0YSwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgdmFsdWUuRGF0ZSA9IG5ldyBEYXRlKHZhbHVlLkRhdGUuc3BsaXQoJy0nKS5qb2luKCcsJykpO1xuICAgICAgICBjb21wYW55W25hbWVdLnB1c2godmFsdWUpO1xuICAgICAgICBtb2RlbC5jb21wYW55TmFtZXMgPSBjb21wYW55TmFtZXM7XG4gICAgICAgIG1vZGVsLmNvbXBhbnkgPSBjb21wYW55W25hbWVdO1xuXG4gICAgICB9KTtcbiAgICB9LCBmdW5jdGlvbihlcnJvcil7XG4gICAgICBhbGVydCgnZXJyb3InKTtcbiAgICB9KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gU3RvY2tTZXJ2aWNlKCRodHRwLCAkcSkge1xuICB2YXIgZG9tYWluID0gXCJodHRwOi8vcXVlcnkueWFob29hcGlzLmNvbS92MS9wdWJsaWMveXFsP3E9XCI7XG4gIHZhciBxdWVyeSA9IFwiJmZvcm1hdD1qc29uJmRpYWdub3N0aWNzPXRydWUmZW52PWh0dHA6Ly9kYXRhdGFibGVzLm9yZy9hbGx0YWJsZXMuZW52XCI7XG5cbiAgcmV0dXJuIHtcbiAgICBnZXRDb21wYW55RGF0ZTogZnVuY3Rpb24obmFtZSl7XG4gICAgICB2YXIgdXJsID0gZG9tYWluICtcbiAgICAgIGVuY29kZVVSSShcInNlbGVjdCAqIGZyb20geWFob28uZmluYW5jZS5oaXN0b3JpY2FsZGF0YSB3aGVyZSBzeW1ib2wgaW4oJ1wiXG4gICAgICAgKyBuYW1lICtcbiAgICAgICBcIicpYW5kIHN0YXJ0RGF0ZSA9ICcyMDE2LTAxLTAxJyBhbmQgZW5kRGF0ZSA9ICcyMDE2LTA2LTMwJ1wiKSArXG4gICAgICBxdWVyeTtcblxuICAgICAgdmFyIGRlZmVycmVkID0gJHEuZGVmZXIoKTtcbiAgICAgICRodHRwLmdldCh1cmwpLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgdmFyIGRhdGUgPSBhbmd1bGFyLmZyb21Kc29uKHJlc3BvbnNlLmRhdGEucXVlcnkucmVzdWx0cyk7XG4gICAgICAgIGRlZmVycmVkLnJlc29sdmUoZGF0ZSk7XG4gICAgICB9LCBmdW5jdGlvbihlcnJvcikge1xuICAgICAgICBkZWZlcnJlZC5yZWplY3QoeyBtZXNzYWdlOiAnUHJvYmxlbSB3aXRoIGNvbm5lY3Rpb24nIH0pO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgICB9XG4gIH07XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmFuZ3VsYXIubW9kdWxlKCdhcHAnKS5kaXJlY3RpdmUoJ2NoYXJ0JywgWydkM1NlcnZpY2UnLCBmdW5jdGlvbihkM1NlcnZpY2UpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0UnLFxuICAgIHNjb3BlOiB7XG4gICAgICBpdGVtOiAnPD9uZ01vZGVsJ1xuICAgIH0sXG4gICAgbGluazogbGlua1xuICB9O1xuXG5cbiBmdW5jdGlvbiBsaW5rKHNjb3BlLCBlbGVtZW50KSB7XG4gICAgICBmdW5jdGlvbiBnZXREYXRlKGRhdGUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKGRhdGUpO1xuICAgICAgfVxuICAgICAgZDNTZXJ2aWNlLmQzKCkudGhlbihmdW5jdGlvbihkMykge1xuXG4gICAgICAgIHNjb3BlLiR3YXRjaCgnaXRlbScsIGZ1bmN0aW9uKG5WYWwpIHtcbiAgICAgICAgICBpZiAoISFuVmFsKSB7XG4gICAgICAgICAgICB2YXIgc3ZnO1xuICAgICAgICAgICAgZDMuc2VsZWN0KFwiI0lEXCIpLnJlbW92ZSgpO1xuXG4gICAgICAgICAgICB2YXIgZGF0YSA9IGFuZ3VsYXIuY29weShuVmFsKS5yZXZlcnNlKCk7XG5cbiAgICAgICAgICAgIHZhciBtYXJnaW4gPSB7IHRvcDogMjAsIHJpZ2h0OiAyMCwgYm90dG9tOiA0MTAsIGxlZnQ6IDUwIH0sXG4gICAgICAgICAgICAgIG1hcmdpbjIgPSB7IHRvcDogNDMwLCByaWdodDogMjAsIGJvdHRvbTogMzMwLCBsZWZ0OiA1MCB9LFxuICAgICAgICAgICAgICBtYXJnaW4zID0geyB0b3A6IDUwMCwgcmlnaHQ6IDIwLCBib3R0b206IDQwLCBsZWZ0OiA1MCB9LFxuICAgICAgICAgICAgICB3aWR0aCA9IDEyMDAgLSBtYXJnaW4ubGVmdCAtIG1hcmdpbi5yaWdodCxcbiAgICAgICAgICAgICAgaGVpZ2h0ID0gODAwIC0gbWFyZ2luLnRvcCAtIG1hcmdpbi5ib3R0b20sXG4gICAgICAgICAgICAgIGhlaWdodDIgPSA4MDAgLSBtYXJnaW4yLnRvcCAtIG1hcmdpbjIuYm90dG9tLFxuICAgICAgICAgICAgICBoZWlnaHQzID0gODAwIC0gbWFyZ2luMy50b3AgLSBtYXJnaW4zLmJvdHRvbTtcblxuICAgICAgICAgICAgdmFyIHggPSBkMy5zY2FsZVRpbWUoKS5yYW5nZShbMCwgd2lkdGhdKSxcbiAgICAgICAgICAgICAgeDIgPSBkMy5zY2FsZVRpbWUoKS5yYW5nZShbMCwgd2lkdGhdKSxcbiAgICAgICAgICAgICAgeDMgPSBkMy5zY2FsZUJhbmQoKS5yYW5nZVJvdW5kKFswLCB3aWR0aF0pLnBhZGRpbmcoMC4xKS5hbGlnbigwLjEpLFxuICAgICAgICAgICAgICB5ID0gZDMuc2NhbGVMaW5lYXIoKS5yYW5nZShbaGVpZ2h0LCAwXSksXG4gICAgICAgICAgICAgIHkyID0gZDMuc2NhbGVMaW5lYXIoKS5yYW5nZShbaGVpZ2h0MiwgMF0pLFxuICAgICAgICAgICAgICB5MyA9IGQzLnNjYWxlTGluZWFyKCkucmFuZ2UoW2hlaWdodDMsIDBdKTtcblxuICAgICAgICAgICAgdmFyIHhBeGlzID0gZDMuYXhpc0JvdHRvbSh4KSxcbiAgICAgICAgICAgICAgeEF4aXMyID0gZDMuYXhpc0JvdHRvbSh4MiksXG4gICAgICAgICAgICAgIHhBeGlzMyA9IGQzLmF4aXNCb3R0b20oeDMpLnRpY2tGb3JtYXQoZDMudGltZUZvcm1hdChcIiVtLSVkXCIpKSxcbiAgICAgICAgICAgICAgeUF4aXMgPSBkMy5heGlzTGVmdCh5KSxcbiAgICAgICAgICAgICAgeUF4aXMzID0gZDMuYXhpc0xlZnQoeTMpO1xuXG4gICAgICAgICAgICB2YXIgYnJ1c2ggPSBkMy5icnVzaFgoKVxuICAgICAgICAgICAgICAuZXh0ZW50KFtcbiAgICAgICAgICAgICAgICBbMCwgMF0sXG4gICAgICAgICAgICAgICAgW3dpZHRoLCBoZWlnaHQyXVxuICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAub24oXCJicnVzaFwiLCBicnVzaGVkKTtcblxuICAgICAgICAgICAgc3ZnID0gZDMuc2VsZWN0KGVsZW1lbnRbMF0pLmFwcGVuZChcInN2Z1wiKVxuICAgICAgICAgICAgICAuYXR0cihcImlkXCIsIFwiSURcIilcbiAgICAgICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCB3aWR0aCArIG1hcmdpbi5sZWZ0ICsgbWFyZ2luLnJpZ2h0KVxuICAgICAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCBoZWlnaHQgKyBtYXJnaW4udG9wICsgbWFyZ2luLmJvdHRvbSk7XG5cbiAgICAgICAgICAgIHN2Zy5hcHBlbmQoXCJkZWZzXCIpLmFwcGVuZChcImNsaXBQYXRoXCIpXG4gICAgICAgICAgICAgIC5hdHRyKFwiaWRcIiwgXCJjbGlwXCIpXG4gICAgICAgICAgICAgIC5hcHBlbmQoXCJyZWN0XCIpXG4gICAgICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgd2lkdGgpXG4gICAgICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIGhlaWdodCk7XG5cbiAgICAgICAgICAgIHZhciBmb2N1cyA9IHN2Zy5hcHBlbmQoXCJnXCIpXG4gICAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJmb2N1c1wiKVxuICAgICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZShcIiArIG1hcmdpbi5sZWZ0ICsgXCIsXCIgKyBtYXJnaW4udG9wICsgXCIpXCIpO1xuXG4gICAgICAgICAgICB2YXIgY29udGV4dCA9IHN2Zy5hcHBlbmQoXCJnXCIpXG4gICAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJjb250ZXh0XCIpXG4gICAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKFwiICsgbWFyZ2luMi5sZWZ0ICsgXCIsXCIgKyBtYXJnaW4yLnRvcCArIFwiKVwiKTtcblxuICAgICAgICAgICAgdmFyIGZyZWcgPSBzdmcuYXBwZW5kKFwiZ1wiKVxuICAgICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwiZnJlZ1wiKVxuICAgICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZShcIiArIG1hcmdpbjMubGVmdCArIFwiLFwiICsgbWFyZ2luMy50b3AgKyBcIilcIik7XG5cblxuXG5cbiAgICAgICAgICAgIHguZG9tYWluKGQzLmV4dGVudChkYXRhLCBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICAgIHJldHVybiBkLkRhdGU7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICB5LmRvbWFpbihbZDMubWluKGRhdGEsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGQuTG93O1xuICAgICAgICAgICAgfSksIGQzLm1heChkYXRhLCBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICAgIHJldHVybiBkLkhpZ2g7XG4gICAgICAgICAgICB9KV0pO1xuICAgICAgICAgICAgeDIuZG9tYWluKHguZG9tYWluKCkpO1xuICAgICAgICAgICAgeTIuZG9tYWluKHkuZG9tYWluKCkpO1xuICAgICAgICAgICAgLy94My5kb21haW4oeC5kb21haW4oKSk7XG4gICAgICAgICAgICB4My5kb21haW4oZGF0YS5tYXAoZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgICByZXR1cm4gZC5EYXRlO1xuICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgICAgICB5My5kb21haW4oeS5kb21haW4oKSk7XG5cblxuICAgICAgICAgICAgdmFyIGFyZWEgPSBkMy5hcmVhKClcbiAgICAgICAgICAgICAgLmN1cnZlKGQzLmN1cnZlTW9ub3RvbmVYKVxuICAgICAgICAgICAgICAueChmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHgoZC5EYXRlKTtcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgLnkwKGhlaWdodClcbiAgICAgICAgICAgICAgLnkxKGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geShkLkNsb3NlKTtcbiAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGZvY3VzLmFwcGVuZChcInBhdGhcIilcbiAgICAgICAgICAgICAgLmRhdGEoW2RhdGFdKVxuICAgICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwiYXJlYVwiKVxuICAgICAgICAgICAgICAuYXR0cihcImRcIiwgYXJlYSk7XG5cblxuICAgICAgICAgICAgLy8gYXBwZW5kIHNjYXR0ZXIgcGxvdCB0byBtYWluIGNoYXJ0IGFyZWFcbiAgICAgICAgICAgIHZhciBkb3RzID0gZm9jdXMuYXBwZW5kKFwiZ1wiKTtcbiAgICAgICAgICAgIGRvdHMuYXR0cihcImNsaXAtcGF0aFwiLCBcInVybCgjY2xpcClcIik7XG4gICAgICAgICAgICBkb3RzLnNlbGVjdEFsbChcImRvdFwiKVxuICAgICAgICAgICAgICAuZGF0YShkYXRhKVxuICAgICAgICAgICAgICAuZW50ZXIoKS5hcHBlbmQoXCJjaXJjbGVcIilcbiAgICAgICAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ2RvdCcpXG4gICAgICAgICAgICAgIC5hdHRyKFwiclwiLCAzKVxuICAgICAgICAgICAgICAuc3R5bGUoXCJvcGFjaXR5XCIsIC41KVxuICAgICAgICAgICAgICAuYXR0cihcImN4XCIsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geChkLkRhdGUpO1xuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAuYXR0cihcImN5XCIsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geShkLkNsb3NlKTtcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgLm9uKCdtb3VzZW92ZXInLCBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICAgICAgZDMuc2VsZWN0KHRoaXMpLmF0dHIoJ3InLCA3KTtcblxuICAgICAgICAgICAgICAgIHZhciBmb3JtYXRUaW1lID0gZDMudGltZUZvcm1hdChcIiVlICVCXCIpXG5cblxuICAgICAgICAgICAgICAgIGRpdi5odG1sKFxuICAgICAgICAgICAgICAgICAgICAnPHRhYmxlPicgKyAnPHRyPicgK1xuICAgICAgICAgICAgICAgICAgICAnPHRkPicgKyAnRGF0ZScgKyAnPC90ZD4nICtcbiAgICAgICAgICAgICAgICAgICAgJzx0ZD4nICsgZm9ybWF0VGltZShkLkRhdGUpICsgJzwvdGQ+JyArICc8L3RyPicgKyAnPHRyPicgK1xuICAgICAgICAgICAgICAgICAgICAnPHRkPicgKyAnT3BlbicgKyAnPC90ZD4nICtcbiAgICAgICAgICAgICAgICAgICAgJzx0ZD4nICsgZC5PcGVuICsgJzwvdGQ+JyArICc8L3RyPicgKyAnPHRyPicgK1xuICAgICAgICAgICAgICAgICAgICAnPHRkPicgKyAnQ2xvc2UnICsgJzwvdGQ+JyArXG4gICAgICAgICAgICAgICAgICAgICc8dGQ+JyArIGQuQ2xvc2UgKyAnPC90ZD4nICsgJzwvdHI+JyArICc8dHI+JyArXG4gICAgICAgICAgICAgICAgICAgICc8dGQ+JyArICdIaWdoJyArICc8L3RkPicgK1xuICAgICAgICAgICAgICAgICAgICAnPHRkPicgKyBkLkhpZ2ggKyAnPC90ZD4nICsgJzwvdHI+JyArICc8dHI+JyArXG4gICAgICAgICAgICAgICAgICAgICc8dGQ+JyArICdMb3cnICsgJzwvdGQ+JyArXG4gICAgICAgICAgICAgICAgICAgICc8dGQ+JyArIGQuTG93ICsgJzwvdGQ+JyArICc8L3RyPicgKyAnPHRyPicgK1xuICAgICAgICAgICAgICAgICAgICAnPHRkPicgKyAnVm9sdW1lJyArICc8L3RkPicgK1xuICAgICAgICAgICAgICAgICAgICAnPHRkPicgKyBkLlZvbHVtZSArICc8L3RkPicgKyAnPC90cj4nICsgJzwvdGFibGU+J1xuICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgLnN0eWxlKFwibGVmdFwiLCAoZDMuZXZlbnQucGFnZVgpICsgXCJweFwiKVxuICAgICAgICAgICAgICAgICAgLnN0eWxlKFwidG9wXCIsIChkMy5ldmVudC5wYWdlWSAtIHBhcnNlSW50KGRpdi5zdHlsZSgnaGVpZ2h0JyksIDEwKSkgKyBcInB4XCIpXG4gICAgICAgICAgICAgICAgICAudHJhbnNpdGlvbigpXG4gICAgICAgICAgICAgICAgICAuZHVyYXRpb24oMjAwKVxuICAgICAgICAgICAgICAgICAgLnN0eWxlKFwib3BhY2l0eVwiLCAuOSlcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgLm9uKCdtb3VzZW91dCcsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgICAgICBkMy5zZWxlY3QodGhpcykuYXR0cigncicsIDMpO1xuICAgICAgICAgICAgICAgIGRpdi50cmFuc2l0aW9uKClcbiAgICAgICAgICAgICAgICAgIC5kdXJhdGlvbig1MDApXG4gICAgICAgICAgICAgICAgICAuc3R5bGUoXCJvcGFjaXR5XCIsIDApO1xuICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgZm9jdXMuYXBwZW5kKFwiZ1wiKVxuICAgICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIFwiYXhpcyBheGlzLS14XCIpXG4gICAgICAgICAgICAgIC5hdHRyKFwiZmlsbFwiLCBcIm5vbmVcIilcbiAgICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoMCxcIiArIGhlaWdodCArIFwiKVwiKVxuICAgICAgICAgICAgICAuY2FsbCh4QXhpcyk7XG5cbiAgICAgICAgICAgIGZvY3VzLmFwcGVuZChcImdcIilcbiAgICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImF4aXMgYXhpcy0teVwiKVxuICAgICAgICAgICAgICAuY2FsbCh5QXhpcyk7XG5cbiAgICAgICAgICAgIGZvY3VzLmFwcGVuZChcInRleHRcIilcbiAgICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJyb3RhdGUoLTkwKVwiKVxuICAgICAgICAgICAgICAuYXR0cihcInlcIiwgMCAtIG1hcmdpbi5sZWZ0KVxuICAgICAgICAgICAgICAuYXR0cihcInhcIiwgMCAtIChoZWlnaHQgLyAyKSlcbiAgICAgICAgICAgICAgLmF0dHIoXCJkeVwiLCBcIjFlbVwiKVxuICAgICAgICAgICAgICAuc3R5bGUoXCJ0ZXh0LWFuY2hvclwiLCBcIm1pZGRsZVwiKVxuICAgICAgICAgICAgICAudGV4dChcIlByaWNlXCIpO1xuXG4gICAgICAgICAgICBzdmcuYXBwZW5kKFwidGV4dFwiKVxuICAgICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLFxuICAgICAgICAgICAgICAgIFwidHJhbnNsYXRlKFwiICsgKCh3aWR0aCArIG1hcmdpbi5yaWdodCArIG1hcmdpbi5sZWZ0KSAvIDIpICsgXCIgLFwiICtcbiAgICAgICAgICAgICAgICBtYXJnaW4zLnRvcCArIFwiKVwiKVxuICAgICAgICAgICAgICAuc3R5bGUoXCJ0ZXh0LWFuY2hvclwiLCBcIm1pZGRsZVwiKVxuICAgICAgICAgICAgICAudGV4dChcIkRhdGVcIik7XG5cbiAgICAgICAgICAgIC8vIERlZmluZSB0aGUgZGl2IGZvciB0aGUgdG9vbHRpcFxuICAgICAgICAgICAgdmFyIGRpdiA9IGQzLnNlbGVjdChlbGVtZW50WzBdKS5hcHBlbmQoXCJkaXZcIilcbiAgICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInRvb2x0aXBcIilcbiAgICAgICAgICAgICAgLnN0eWxlKFwib3BhY2l0eVwiLCAwKTtcblxuXG5cbiAgICAgICAgICAgIC8vIGFwcGVuZCBzY2F0dGVyIHBsb3QgdG8gYnJ1c2ggY2hhcnQgYXJlYVxuICAgICAgICAgICAgY29udGV4dC5hcHBlbmQoXCJnXCIpXG4gICAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJheGlzIGF4aXMtLXhcIilcbiAgICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoMCxcIiArIGhlaWdodDIgKyBcIilcIilcbiAgICAgICAgICAgICAgLmNhbGwoeEF4aXMyKTtcblxuICAgICAgICAgICAgY29udGV4dC5hcHBlbmQoXCJnXCIpXG4gICAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJicnVzaFwiKVxuICAgICAgICAgICAgICAuY2FsbChicnVzaClcbiAgICAgICAgICAgICAgLmNhbGwoYnJ1c2gubW92ZSwgeC5yYW5nZSgpKTtcblxuICAgICAgICAgICAgdmFyIGFyZWEyID0gZDMuYXJlYSgpXG4gICAgICAgICAgICAgIC5jdXJ2ZShkMy5jdXJ2ZU1vbm90b25lWClcbiAgICAgICAgICAgICAgLngoZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB4MihkLkRhdGUpO1xuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAueTAoaGVpZ2h0MilcbiAgICAgICAgICAgICAgLnkxKGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geTIoZC5DbG9zZSk7XG4gICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBjb250ZXh0LmFwcGVuZChcInBhdGhcIilcbiAgICAgICAgICAgICAgLmRhdHVtKGRhdGEpXG4gICAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJhcmVhXCIpXG4gICAgICAgICAgICAgIC5hdHRyKFwiZFwiLCBhcmVhMik7XG5cblxuICAgICAgICAgICAgZnJlZy5hcHBlbmQoXCJnXCIpXG4gICAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJheGlzIGF4aXMtLXhcIilcbiAgICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoMCxcIiArIGhlaWdodDMgKyBcIilcIilcbiAgICAgICAgICAgICAgLmNhbGwoeEF4aXMzKVxuICAgICAgICAgICAgICAuc2VsZWN0QWxsKFwidGV4dFwiKVxuICAgICAgICAgICAgICAuc3R5bGUoXCJ0ZXh0LWFuY2hvclwiLCBcImVuZFwiKVxuICAgICAgICAgICAgICAuYXR0cihcImR4XCIsIFwiLS44ZW1cIilcbiAgICAgICAgICAgICAgLmF0dHIoXCJkeVwiLCBcIi0uNTVlbVwiKVxuICAgICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInJvdGF0ZSgtOTApXCIpO1xuXG4gICAgICAgICAgICBmcmVnLmFwcGVuZChcImdcIilcbiAgICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImF4aXMgYXhpcy0teVwiKVxuICAgICAgICAgICAgICAuY2FsbCh5QXhpczMpO1xuXG4gICAgICAgICAgICAvLyBBZGQgYSByZWN0IGZvciBlYWNoIGRhdGUuXG4gICAgICAgICAgICB2YXIgcmVjdCA9IGZyZWcuc2VsZWN0QWxsKFwicmVjdFwiKVxuICAgICAgICAgICAgICAuZGF0YShkYXRhKVxuICAgICAgICAgICAgICAuZW50ZXIoKS5hcHBlbmQoXCJyZWN0XCIpXG4gICAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJiYXJcIilcbiAgICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geDMoZC5EYXRlKTtcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geTMoZC5IaWdoKTtcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgICAgIHkzKGQuSGlnaCk7XG4gICAgICAgICAgICAgICAgeTMoZC5Mb3cpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHkzKGQuTG93KSAtIHkzKGQuSGlnaCk7XG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgeDMuYmFuZHdpZHRoKCkpO1xuXG5cblxuICAgICAgICAgICAgLy9jcmVhdGUgYnJ1c2ggZnVuY3Rpb24gcmVkcmF3IHNjYXR0ZXJwbG90IHdpdGggc2VsZWN0aW9uXG4gICAgICAgICAgICBmdW5jdGlvbiBicnVzaGVkKCkge1xuXG4gICAgICAgICAgICAgIGlmIChkMy5ldmVudC5zb3VyY2VFdmVudCAmJiBkMy5ldmVudC5zb3VyY2VFdmVudC50eXBlID09PSBcInpvb21cIikgcmV0dXJuOyAvLyBpZ25vcmUgYnJ1c2gtYnktem9vbVxuXG5cbiAgICAgICAgICAgICAgdmFyIHNlbGVjdGlvbiA9IGQzLmV2ZW50LnNlbGVjdGlvbjtcbiAgICAgICAgICAgICAgeC5kb21haW4oc2VsZWN0aW9uLm1hcCh4Mi5pbnZlcnQsIHgyKSk7XG4gICAgICAgICAgICAgIGZvY3VzLnNlbGVjdChcIi5hcmVhXCIpLmF0dHIoXCJkXCIsIGFyZWEpO1xuICAgICAgICAgICAgICBmb2N1cy5zZWxlY3RBbGwoXCIuZG90XCIpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJjeFwiLCBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4geChkLkRhdGUpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJjeVwiLCBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4geShkLkNsb3NlKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgZm9jdXMuc2VsZWN0KFwiLmF4aXMtLXhcIikuY2FsbCh4QXhpcyk7XG5cbiAgICAgICAgICAgICAgeDMuZG9tYWluKCk7XG5cblxuICAgICAgICAgICAgICB2YXIgcmFuZ2UgPSBzZWxlY3Rpb24ubWFwKHgyLmludmVydCwgeDIpO1xuXG4gICAgICAgICAgICAgIHgzLmRvbWFpbihkYXRhLm1hcChmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICAgICAgaWYgKHJhbmdlWzBdIDw9IGQuRGF0ZSAmJiBkLkRhdGUgPD0gcmFuZ2VbMV0pXG4gICAgICAgICAgICAgICAgICByZXR1cm4gZC5EYXRlO1xuICAgICAgICAgICAgICB9KSk7XG5cblxuICAgICAgICAgICAgICBmcmVnLnNlbGVjdEFsbChcInJlY3RcIilcbiAgICAgICAgICAgICAgICAuYXR0cihcInhcIiwgZnVuY3Rpb24oZCkge1xuXG4gICAgICAgICAgICAgICAgICBpZiAocmFuZ2VbMF0gPD0gZC5EYXRlICYmIGQuRGF0ZSA8PSByYW5nZVsxXSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHgzKGQuRGF0ZSk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuYXR0cihcInlcIiwgZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgICAgICAgaWYgKHJhbmdlWzBdIDw9IGQuRGF0ZSAmJiBkLkRhdGUgPD0gcmFuZ2VbMV0pXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB5MyhkLkhpZ2gpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmF0dHIoJ2RhdGUnLCBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICAgICAgICBpZiAocmFuZ2VbMF0gPD0gZC5EYXRlICYmIGQuRGF0ZSA8PSByYW5nZVsxXSlcbiAgICAgICAgICAgICAgICAgIHJldHVybiBkLkRhdGU7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCBmdW5jdGlvbihkKSB7XG5cbiAgICAgICAgICAgICAgICAgIHkzKGQuSGlnaCk7XG4gICAgICAgICAgICAgICAgICB5MyhkLkxvdyk7XG5cbiAgICAgICAgICAgICAgICAgIGlmIChyYW5nZVswXSA8PSBkLkRhdGUgJiYgZC5EYXRlIDw9IHJhbmdlWzFdKVxuICAgICAgICAgICAgICAgICAgcmV0dXJuIHkzKGQuTG93KSAtIHkzKGQuSGlnaCk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuYXR0cihcIndpZHRoXCIsIHgzLmJhbmR3aWR0aCgpKTtcblxuICAgICAgICAgICAgICBmcmVnLnNlbGVjdChcIi5heGlzLS14XCIpLmNhbGwoeEF4aXMzKVxuICAgICAgICAgICAgICAgIC5zZWxlY3RBbGwoXCJ0ZXh0XCIpXG4gICAgICAgICAgICAgICAgLnRleHQoZnVuY3Rpb24oZCkge1xuXG4gICAgICAgICAgICAgICAgICBpZighIWQpe1xuICAgICAgICAgICAgICAgICAgIHZhciBmb3JtYXRUaW1lID0gZDMudGltZUZvcm1hdChcIiVtLSVkXCIpO1xuICAgICAgICAgICAgICAgICAgIHJldHVybiBmb3JtYXRUaW1lKGQpO1xuICAgICAgICAgICAgICAgICAgfX0pXG4gICAgICAgICAgICAgICAgLnN0eWxlKFwidGV4dC1hbmNob3JcIiwgXCJlbmRcIilcbiAgICAgICAgICAgICAgICAuYXR0cihcImR4XCIsIFwiLS44ZW1cIilcbiAgICAgICAgICAgICAgICAuYXR0cihcImR5XCIsIFwiLS41NWVtXCIpXG4gICAgICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJyb3RhdGUoLTkwKVwiKTtcblxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgIH0pO1xuICAgIH1cblxuXG5cblxuXG5cblxuXG5cblxuXG5cbn1dKTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
